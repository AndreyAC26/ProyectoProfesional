
@{
    ViewBag.Title = "DetalleOrden";

}

@model MVCMuncheese.Models.modeloDetalleOrden
@{
    ViewBag.Title = "Orden";
    <style>
        table#tablaOrdenes th.id-producto,
        table#tablaOrdenes td.id-producto {
            display: none;
        }

        table#tablaOrdenes td.nombre-producto {
            display: table-cell;
        }
    </style>
}

@section scripts {
    <script type="text/javascript">

        //Cargar productos por tipo producto
                      function CargarProductos() {
                var pTipo_Producto = $("#tipoProducto").val();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("ObtenerProductosPorTipo", "DetalleOrden")?pTipo_Producto=" + pTipo_Producto,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        var productos = $("#productos");
                        productos.empty();
                        productos.append('<option value="">- Productos -</option>');
                        $.each(data, function (index, item) {
                            productos.append('<option value="' + item.Id_producto + '">' + item.Nombre + '</option>');
                        });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        alert("Error al cargar los productos.");
                    }
                });
            }
        // obtener el precio de cada producto
                $("#productos").change(function () {
                    var pId_Producto = $(this).val();
                    if (pId_Producto !== "") {
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("obtenerPrecioPorProducto", "DetalleOrden")?Id_tipo_Producto=" + pId_Producto,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                $("#Precio").val(data);
                            },
                            error: function (xhr, textStatus, errorThrown) {
                                alert("Error al cargar el precio del producto.");
                            }
                        });
                    } else {
                        $("#Precio").val("");
                    }
                });

        //agregar filas a la tablaOrdenes
            function agregarFila() {
                // Obtener los valores de los campos de entrada
                var Id_Orden = document.getElementById("Id_Orden").value;
                var producto = document.getElementById("productos").value;
                var cantidad = document.getElementById("Cantidad").value;
                var mesa = document.getElementById("Mesa").value;
                var precio = document.getElementById("Precio").value;
                var tipoOrden = document.getElementById("TipoOrden").value;
                var descripcion = document.getElementById("Descripcion").value;
                //var subtotal = precio * cantidad;

                // Buscar el nombre del producto en la lista de productos disponibles
                var productoId = document.getElementById("productos").value;
                var producto = document.querySelector("#productos option[value='" + productoId + "']").textContent;

                var productosDisponibles = @Html.Raw(Json.Encode(Model.Productos));
                for (var i = 0; i < productosDisponibles.length; i++) {
                    if (productosDisponibles[i].Id_producto == productoId) {
                        producto = productosDisponibles[i].Nombre;
                        break;
                    }
                }

                // Crear una nueva fila
                var fila = document.createElement("tr");

                // Agregar las celdas a la fila
                var celdaId_Orden = document.createElement("td");
                celdaId_Orden.innerHTML = Id_Orden;
                fila.appendChild(celdaId_Orden);

                //var celdaTipoProducto = document.createElement("td");
                //celdaTipoProducto.innerHTML = tipoProducto;
                //fila.appendChild(celdaTipoProducto);

                //var celdaProducto = document.createElement("td");
                //celdaProducto.innerHTML = producto;
                //fila.appendChild(celdaProducto);

                var celdaProducto = document.createElement("td");
                celdaProducto.textContent = producto;
                celdaProducto.classList.add("nombre-producto");
                celdaProducto.classList.add("id-producto-" + productoId); // Agregar clase con ID del producto
                fila.appendChild(celdaProducto);

                var celdaCantidad = document.createElement("td");
                celdaCantidad.innerHTML = cantidad;
                fila.appendChild(celdaCantidad);

                var celdaMesa = document.createElement("td");
                celdaMesa.innerHTML = mesa;
                fila.appendChild(celdaMesa);

                var celdaPrecio = document.createElement("td");
                celdaPrecio.innerHTML = precio;
                fila.appendChild(celdaPrecio);

                var celdaTipoOrden = document.createElement("td");
                celdaTipoOrden.innerHTML = tipoOrden;
                fila.appendChild(celdaTipoOrden);


                var celdaDescripcion = document.createElement("td");
                celdaDescripcion.innerHTML = descripcion;
                fila.appendChild(celdaDescripcion);

                //var celdaSubtotal = document.createElement("td");
                //celdaSubtotal.innerHTML = subtotal;
                //fila.appendChild(celdaSubtotal);

                // Agregar la fila a la tabla
                document.getElementById("detalleOrden").appendChild(fila);

            }



        // --------- Funcion Javascript para cargar la funcion insertarDetalleOrden ------------//
        function enviarDetalleOrden() {
            var filas = document.getElementById("tablaOrdenes").getElementsByTagName("tbody")[0].getElementsByTagName("tr");
            var datosOrdenes = [];

            for (var i = 0; i < filas.length; i++) {
                var fila = filas[i];
                var Id_Orden = fila.getElementsByTagName("td")[0].innerText;
                var Id_producto = fila.getElementsByTagName("td")[1].innerText;
                var Cantidad = fila.getElementsByTagName("td")[2].innerText;
                var Mesa = fila.getElementsByTagName("td")[3].innerText;
                var Precio = fila.getElementsByTagName("td")[4].innerText;74
                var Tipo_orden = fila.getElementsByTagName("td")[5].innerText;
                var Descripcion = fila.getElementsByTagName("td")[6].innerText;

                // guardar los datos de la fila en un objeto
                var datosFila = {
                    Id_Orden: Id_Orden,
                    Id_producto: Id_producto,
                    Cantidad: Cantidad,
                    Mesa: Mesa,
                    Precio: Precio,
                    Tipo_orden: Tipo_orden,
                    Descripcion: Descripcion
                };

                // agregar el objeto a un arreglo
                datosOrdenes.push(datosFila);
            }


            // enviar los datos a la función insertarDeta_PA en la acción del controlador
            $.ajax({
                type: "POST",
                url: "/DetalleOrden/accionesPAA",
                data: { enviarAccionPA: "Agregar", datosOrdenes: datosOrdenes },
                success: function (result) {
                    // mostrar mensaje de éxito
                },
                error: function () {
                    // mostrar mensaje de error
                }
            });
        }


        //carga el ultimo Id_Orden al editorfor id_orden
        $(document).ready(function() {
        var ultimoIdOrden = @Model.UltimoIdOrden;
        $('#Id_Orden').val(ultimoIdOrden);
    });

        document.getElementById("finalizar-btn").addEventListener("click", enviarDetalleOrden);
    </script>
}


<div class="jumbotron">

    <div>
        <h3 class="container-fluid" style="text-align:center">Orden</h3>
    </div>
    <form class="form-horizontal">

        <fieldset>
            <div class="col-md-12">
                <div class="form-group col-md-12">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.Id_Orden, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Id_Orden, new { htmlAttributes = new { @class = "form-control", id = "Id_Orden" } })
                        @Html.ValidationMessageFor(model => model.Id_Orden, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Tipo_Producto, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(model => model.Tipo_Producto, ViewBag.Tipo_Producto as SelectList, "- Categoria -", new { @class = "form-control", id = "tipoProducto", onchange = "CargarProductos();" })
                        @Html.ValidationMessageFor(model => model.Tipo_Producto, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Id_producto, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(model => model.Id_producto, new SelectList(new List<Entidades.Productos>(), "Id_producto", "Nombre"), "- Productos -", new { @class = "form-control", id = "productos" })
                        @Html.ValidationMessageFor(model => model.Id_producto, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Precio, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Precio, new { htmlAttributes = new { @class = "form-control", id = "Precio" } })
                        @Html.ValidationMessageFor(model => model.Precio, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Cantidad, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control", min = "0", max = "10" } })
                        @Html.ValidationMessageFor(model => model.Cantidad, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group col-md-4">
                    <div class="col-lg-10">
                        <label>Tipo de Orden</label>
                        <select class="form-control" id="TipoOrden">
                            <option value="">-- Seleccione uno --</option>
                            <option value="Para llevar">Para llevar</option>
                            <option value="Comer aquí">Comer aquí</option>
                        </select>
                    </div>
                </div>

                <div class="form-group col-md-4">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Mesa, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Mesa, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Mesa, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="col-lg-12">
                <div class="form-group col-md-4">
                    <div class="col-lg-10 col-lg-offset-2">
                        <button type="reset" class="btn btn-primary">Cancelar</button>
                        <button type="button" class="btn btn-primary" onclick="agregarFila();">Agregar</button>
                    </div>

                </div>
            </div>
        </fieldset>
    </form>
</div>



<table class="table" id="tablaOrdenes">
    <thead>
        <tr data-id="DetalleOrden.Id_Detalle">
            <th>Num. Orden</th>
            <th>Producto</th>
            <th>Cantidad</th>
            <th>Mesa</th>
            <th>Precio</th>
            <th>Tipo de Orden</th>
            <th>Descripcion</th>
        </tr>
    </thead>
    <tbody id="detalleOrden">
    </tbody>
</table>


<div class="form-group col-md-12" style="text-align:right">
    <div class="col-lg-10 col-lg-offset-2">
        <button type="button" class="btn btn-primary" id="finalizar-btn" onclick="enviarDetalleOrden()">@Html.ActionLink("Finalizar", "Mesas", "Mesas", null, new { style = "color:white;" })</button>
        <div class="btn btn-primary">@Html.ActionLink("Atras", "Mesas", "Mesas", null, new { style = "color:white;" })</div>
    </div>
</div>
